variables:
  PROJECT_NAME: myFunction
  GIT_CLONE_PATH: ${CI_BUILDS_DIR}/src/$PROJECT_NAME
  REGISTRY: registry.tcl.com
  NAMESPACE: namespace
  IMAGE: $NAMESPACE/$PROJECT_NAME
  TAG: $CI_COMMIT_REF_NAME

stages:
  - go-check
  - go-test
  - go-build

go-report-card:
  variables:
    GRADE_THRESHOLD: 90
    REPORT_BASE_NAME: $PROJECT_NAME-go-report-card
    REPORT_FILE: ${REPORT_BASE_NAME}.txt
  image: jenner/goreportcard-cli
  stage: go-check
  artifacts:
    name:  "$REPORT_BASE_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - $REPORT_FILE
    when: always
  script:
    - export GOPATH=$CI_BUILDS_DIR && export CGO_ENABLED=0 && export GOOS=linux  
    - goreportcard-cli -v >  $REPORT_FILE
    - cat $REPORT_FILE
    - grade=$(grep "Grade:"  $REPORT_FILE |cut -d '(' -f2|cut -d '%' -f1)
    - if [ $(echo "$grade>$GRADE_THRESHOLD"|bc) -ne 1 ]; then echo "GO CHECK FAILED BECAUSE GRADE BELOW $GRADE_THRESHOLD . " && exit 1; fi;
  only:
    refs:
      - branches
    changes:
      - "*.go"

go-test:
  image: ${REGISTRY}/library/golang:alpine3.10
  stage: go-test
  script:
    - export GOPATH=$CI_BUILDS_DIR && export CGO_ENABLED=0 && export GOOS=linux 
    - go test .
  only:
    refs:
      - branches
    changes:
      - "*.go"

go-build:
  image: ${REGISTRY}/library/golang:alpine3.10
  stage: go-build
  artifacts:
    name:  "$CI_COMMIT_REF_NAME-$PROJECT_NAME-main"
    paths:
      - $PROJECT_NAME-main
  script:
    - export GOPATH=$CI_BUILDS_DIR && export CGO_ENABLED=0 && export GOOS=linux  
    - go build -a -installsuffix cgo -o $PROJECT_NAME-main .
  only:
    refs:
      - branches
    changes:
      - "*.go"
